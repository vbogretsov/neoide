if exists('g:neoide_loaded')
    finish
endif

let g:neoide_loaded = 1
let s:neoided_path =  expand('<sfile>:p:h:h') . '/bin/neoided'

function! s:start_neoide(host) abort
    " TOOD: fix path
    return jobstart([s:neoided_path], {'rpc': v:true})
endfunction

function! s:init_go()
    call remote#host#Register('neoided', 'x', function('s:start_neoide'))
    "" The following lines are generated by running the program
    "" command line flag --manifest hello
    call remote#host#RegisterPlugin('neoided', '0', [
        \ {'type': 'function', 'name': '_neoide_configure', 'sync': 1, 'opts': {}}
        \ ])
endfunction

function! s:completefunc(findstart, base)
    if a:findstart
        let b:completions = NeoIdeFindCompletions(expand('%:p'), getline(1, '$'), line('.'))
        return b:completions['position']
    else
        return {'words': b:completions['words'], 'refresh': 'always'}
    endif
endfunction

function! s:show_completions()
    call feedkeys('\<C-X>\<C-U>\<C-P>', 'i')
endfunction

function! s:cancel_completions()
    call feedkeys('\<C-E>', 'i')
endfunction

function! s:init()
    call s:init_go()

    if !exists('g:neoide_settings')
        let g:neoide_settings = {'libclang_path': ''}
    endif

    call _neoide_configure(g:neoide_settings)

    set completefunc=CompleteFunc
    inoremap <C-Space> <C-O>:call s:show_completions()<CR>

    " TODO: remove
    profile start profile.log
    profile func *
    profile file *
endfunction

call s:init()

" vim:ts=4:sw=4:et